{"ast":null,"code":"var _jsxFileName = \"/Users/maxmynter/Desktop/fullstackOpen/fullstackOpen/part1/unicafe/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Header = _ref => {\n  let {\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n_c = Header;\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.onClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n};\n_c2 = Button;\nconst StatisticLine = _ref2 => {\n  let {\n    stat\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [stat.text, \": \", stat.stat]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n};\n_c3 = StatisticLine;\nconst Statistics = props => {\n  if (props.stats.find(obj => obj.text == \"All\").stat == 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Feedback given!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: props.stats.map(stat => /*#__PURE__*/_jsxDEV(StatisticLine, {\n        stat: stat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  }\n};\n_c4 = Statistics;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  let stats = [{\n    text: \"Good\",\n    stat: good\n  }, {\n    text: \"Neutral\",\n    stat: neutral\n  }, {\n    text: \"Bad\",\n    stat: bad\n  }, {\n    text: \"Average\",\n    stat: (good - bad) / 2\n  }, {\n    text: \"Positive Rate\",\n    stat: `${good + bad + neutral > 0 ? 100 * good / (good + neutral + bad) : 0} %`\n  }, {\n    text: \"All\",\n    stat: good + bad + neutral\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      text: \"Give Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Good\",\n      onClick: () => setGood(good + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Neutral\",\n      onClick: () => setNeutral(neutral + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Bad\",\n      onClick: () => setBad(bad + 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      text: \"Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n_c5 = App;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"StatisticLine\");\n$RefreshReg$(_c4, \"Statistics\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["useState","Header","text","Button","props","onClick","StatisticLine","stat","Statistics","stats","find","obj","map","App","good","setGood","neutral","setNeutral","bad","setBad"],"sources":["/Users/maxmynter/Desktop/fullstackOpen/fullstackOpen/part1/unicafe/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst Header = ({ text }) => {\n  return <h1>{text}</h1>;\n};\n\nconst Button = (props) => {\n  return <button onClick={props.onClick}>{props.text}</button>;\n};\n\nconst StatisticLine = ({ stat }) => (\n  <p>\n    {stat.text}: {stat.stat}\n  </p>\n);\n\nconst Statistics = (props) => {\n  if (props.stats.find((obj) => obj.text == \"All\").stat == 0) {\n    return <p>No Feedback given!</p>;\n  } else {\n    return (\n      <>\n        {props.stats.map((stat) => (\n          <StatisticLine stat={stat} />\n        ))}\n      </>\n    );\n  }\n};\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  let stats = [\n    { text: \"Good\", stat: good },\n    { text: \"Neutral\", stat: neutral },\n    { text: \"Bad\", stat: bad },\n    { text: \"Average\", stat: (good - bad) / 2 },\n    {\n      text: \"Positive Rate\",\n      stat: `${\n        good + bad + neutral > 0 ? (100 * good) / (good + neutral + bad) : 0\n      } %`,\n    },\n    { text: \"All\", stat: good + bad + neutral },\n  ];\n\n  return (\n    <div>\n      <Header text=\"Give Feedback\" />\n      <Button text=\"Good\" onClick={() => setGood(good + 1)} />\n      <Button text=\"Neutral\" onClick={() => setNeutral(neutral + 1)} />\n      <Button text=\"Bad\" onClick={() => setBad(bad + 1)} />\n      <Header text=\"Statistics\" />\n      <Statistics stats={stats} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}